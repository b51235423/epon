//
// Generated file, do not edit! Created by opp_msgc 4.5 from mpcp.msg.
//

#ifndef _EPON_MPCP_M_H_
#define _EPON_MPCP_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif


namespace epon {

/**
 * Enum generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * enum FrameTag
 * {
 *     TagNormal = 0;
 *     TagDebug = 1;
 *     TagFront = 2;
 *     TagBack = 3;
 *     TagFrontAndBack = 4;
 * }
 * </pre>
 */
enum FrameTag {
    TagNormal = 0,
    TagDebug = 1,
    TagFront = 2,
    TagBack = 3,
    TagFrontAndBack = 4
};

/**
 * Enum generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * enum Response
 * {
 *     NOSIGNAL = -1;
 *   	NONE = 0;
 *     ACK = 1;
 *     NACK = 2;
 *     CS = 3;
 *     DS = 4;
 * };
 * </pre>
 */
enum Response {
    NOSIGNAL = -1,
    NONE = 0,
    ACK = 1,
    NACK = 2,
    CS = 3,
    DS = 4
};

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet Frame
 * {
 * 	int64_t DST;
 * 	int64_t SRC;
 * 	simtime_t rxTime;
 * 	simtime_t txTime;
 * 	
 * 	
 * 	int tag @enum(FrameTag) = TagNormal;
 * }
 * </pre>
 */
class Frame : public ::cPacket
{
  protected:
    int64_t DST_var;
    int64_t SRC_var;
    simtime_t rxTime_var;
    simtime_t txTime_var;
    int tag_var;

  private:
    void copy(const Frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Frame&);

  public:
    Frame(const char *name=NULL, int kind=0);
    Frame(const Frame& other);
    virtual ~Frame();
    Frame& operator=(const Frame& other);
    virtual Frame *dup() const {return new Frame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int64_t getDST() const;
    virtual void setDST(int64_t DST);
    virtual int64_t getSRC() const;
    virtual void setSRC(int64_t SRC);
    virtual simtime_t getRxTime() const;
    virtual void setRxTime(simtime_t rxTime);
    virtual simtime_t getTxTime() const;
    virtual void setTxTime(simtime_t txTime);
    virtual int getTag() const;
    virtual void setTag(int tag);
};

inline void doPacking(cCommBuffer *b, Frame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Frame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet DataFrame extends Frame
 * {
 * 	
 * 	bool vacation = false;
 *     simtime_t residualTime = 0;
 *     simtime_t queueTime = 0;
 * 	
 * 	
 * 	bool forwarded = false;
 * 	simtime_t s1Delay = 0;
 * 	simtime_t burstTime = 0;
 * 	
 * 	
 * 	
 * 	
 * 	
 * }
 * </pre>
 */
class DataFrame : public ::epon::Frame
{
  protected:
    bool vacation_var;
    simtime_t residualTime_var;
    simtime_t queueTime_var;
    bool forwarded_var;
    simtime_t s1Delay_var;
    simtime_t burstTime_var;

  private:
    void copy(const DataFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataFrame&);

  public:
    DataFrame(const char *name=NULL, int kind=0);
    DataFrame(const DataFrame& other);
    virtual ~DataFrame();
    DataFrame& operator=(const DataFrame& other);
    virtual DataFrame *dup() const {return new DataFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getVacation() const;
    virtual void setVacation(bool vacation);
    virtual simtime_t getResidualTime() const;
    virtual void setResidualTime(simtime_t residualTime);
    virtual simtime_t getQueueTime() const;
    virtual void setQueueTime(simtime_t queueTime);
    virtual bool getForwarded() const;
    virtual void setForwarded(bool forwarded);
    virtual simtime_t getS1Delay() const;
    virtual void setS1Delay(simtime_t s1Delay);
    virtual simtime_t getBurstTime() const;
    virtual void setBurstTime(simtime_t burstTime);
};

inline void doPacking(cCommBuffer *b, DataFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet MPCPGate extends Frame 
 * {
 *     simtime_t startTime;
 *     simtime_t length;
 * }
 * </pre>
 */
class MPCPGate : public ::epon::Frame
{
  protected:
    simtime_t startTime_var;
    simtime_t length_var;

  private:
    void copy(const MPCPGate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MPCPGate&);

  public:
    MPCPGate(const char *name=NULL, int kind=0);
    MPCPGate(const MPCPGate& other);
    virtual ~MPCPGate();
    MPCPGate& operator=(const MPCPGate& other);
    virtual MPCPGate *dup() const {return new MPCPGate(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getStartTime() const;
    virtual void setStartTime(simtime_t startTime);
    virtual simtime_t getLength() const;
    virtual void setLength(simtime_t length);
};

inline void doPacking(cCommBuffer *b, MPCPGate& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MPCPGate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet MPCPReport extends Frame
 * {
 *     int requiredBandwidth;
 * }
 * </pre>
 */
class MPCPReport : public ::epon::Frame
{
  protected:
    int requiredBandwidth_var;

  private:
    void copy(const MPCPReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MPCPReport&);

  public:
    MPCPReport(const char *name=NULL, int kind=0);
    MPCPReport(const MPCPReport& other);
    virtual ~MPCPReport();
    MPCPReport& operator=(const MPCPReport& other);
    virtual MPCPReport *dup() const {return new MPCPReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRequiredBandwidth() const;
    virtual void setRequiredBandwidth(int requiredBandwidth);
};

inline void doPacking(cCommBuffer *b, MPCPReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MPCPReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet SLAGate extends MPCPGate 
 * {
 *     
 *     int signal @enum(Response);
 *     simtime_t sleepTime;
 *     simtime_t wakeUpTime;
 * }
 * </pre>
 */
class SLAGate : public ::epon::MPCPGate
{
  protected:
    int signal_var;
    simtime_t sleepTime_var;
    simtime_t wakeUpTime_var;

  private:
    void copy(const SLAGate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SLAGate&);

  public:
    SLAGate(const char *name=NULL, int kind=0);
    SLAGate(const SLAGate& other);
    virtual ~SLAGate();
    SLAGate& operator=(const SLAGate& other);
    virtual SLAGate *dup() const {return new SLAGate(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSignal() const;
    virtual void setSignal(int signal);
    virtual simtime_t getSleepTime() const;
    virtual void setSleepTime(simtime_t sleepTime);
    virtual simtime_t getWakeUpTime() const;
    virtual void setWakeUpTime(simtime_t wakeUpTime);
};

inline void doPacking(cCommBuffer *b, SLAGate& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SLAGate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet SLAReport extends MPCPReport
 * {
 *     int signal @enum(Response);
 *     
 * }
 * </pre>
 */
class SLAReport : public ::epon::MPCPReport
{
  protected:
    int signal_var;

  private:
    void copy(const SLAReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SLAReport&);

  public:
    SLAReport(const char *name=NULL, int kind=0);
    SLAReport(const SLAReport& other);
    virtual ~SLAReport();
    SLAReport& operator=(const SLAReport& other);
    virtual SLAReport *dup() const {return new SLAReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSignal() const;
    virtual void setSignal(int signal);
};

inline void doPacking(cCommBuffer *b, SLAReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SLAReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet CSLAGate extends Frame
 * {
 *     
 *     int Grant1TransceiverMode @enum(Response);
 *     simtime_t Grant1StartTime;
 *     simtime_t Grant1Length;
 *     simtime_t Grant2StartTime;
 *     simtime_t Grant2Length;
 * }
 * </pre>
 */
class CSLAGate : public ::epon::Frame
{
  protected:
    int Grant1TransceiverMode_var;
    simtime_t Grant1StartTime_var;
    simtime_t Grant1Length_var;
    simtime_t Grant2StartTime_var;
    simtime_t Grant2Length_var;

  private:
    void copy(const CSLAGate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CSLAGate&);

  public:
    CSLAGate(const char *name=NULL, int kind=0);
    CSLAGate(const CSLAGate& other);
    virtual ~CSLAGate();
    CSLAGate& operator=(const CSLAGate& other);
    virtual CSLAGate *dup() const {return new CSLAGate(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getGrant1TransceiverMode() const;
    virtual void setGrant1TransceiverMode(int Grant1TransceiverMode);
    virtual simtime_t getGrant1StartTime() const;
    virtual void setGrant1StartTime(simtime_t Grant1StartTime);
    virtual simtime_t getGrant1Length() const;
    virtual void setGrant1Length(simtime_t Grant1Length);
    virtual simtime_t getGrant2StartTime() const;
    virtual void setGrant2StartTime(simtime_t Grant2StartTime);
    virtual simtime_t getGrant2Length() const;
    virtual void setGrant2Length(simtime_t Grant2Length);
};

inline void doPacking(cCommBuffer *b, CSLAGate& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CSLAGate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet CSLAReport extends Frame
 * {
 *     int Request1Length;
 *     
 * }
 * </pre>
 */
class CSLAReport : public ::epon::Frame
{
  protected:
    int Request1Length_var;

  private:
    void copy(const CSLAReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CSLAReport&);

  public:
    CSLAReport(const char *name=NULL, int kind=0);
    CSLAReport(const CSLAReport& other);
    virtual ~CSLAReport();
    CSLAReport& operator=(const CSLAReport& other);
    virtual CSLAReport *dup() const {return new CSLAReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRequest1Length() const;
    virtual void setRequest1Length(int Request1Length);
};

inline void doPacking(cCommBuffer *b, CSLAReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CSLAReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet GBAGate extends MPCPGate 
 * {
 *     simtime_t ONUSleepTime;
 * }
 * </pre>
 */
class GBAGate : public ::epon::MPCPGate
{
  protected:
    simtime_t ONUSleepTime_var;

  private:
    void copy(const GBAGate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GBAGate&);

  public:
    GBAGate(const char *name=NULL, int kind=0);
    GBAGate(const GBAGate& other);
    virtual ~GBAGate();
    GBAGate& operator=(const GBAGate& other);
    virtual GBAGate *dup() const {return new GBAGate(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getONUSleepTime() const;
    virtual void setONUSleepTime(simtime_t ONUSleepTime);
};

inline void doPacking(cCommBuffer *b, GBAGate& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GBAGate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mpcp.msg</tt> by opp_msgc.
 * <pre>
 * packet GBAReport extends MPCPReport
 * {
 * 
 * }
 * </pre>
 */
class GBAReport : public ::epon::MPCPReport
{
  protected:

  private:
    void copy(const GBAReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GBAReport&);

  public:
    GBAReport(const char *name=NULL, int kind=0);
    GBAReport(const GBAReport& other);
    virtual ~GBAReport();
    GBAReport& operator=(const GBAReport& other);
    virtual GBAReport *dup() const {return new GBAReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, GBAReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GBAReport& obj) {obj.parsimUnpack(b);}

}; // end namespace epon

#endif // _EPON_MPCP_M_H_
